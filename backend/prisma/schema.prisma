
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL") // Use environment variable for the database URL
}

model User {
  id                   String    @id @default(uuid())
  username             String?          @unique
  firstname            String
  lastname             String
  email                String           @unique
  password             String?
  avatar               String?
  contactDetails       String?
  facialData           String?   // Store facial recognition data (e.g., a reference to the file or hash)
  resetToken            String?
  resetTokenExpiry     DateTime?
  isBanned            Boolean   @default(false)
  role                String    @default("user") // Roles: user, admin
  tickets             Ticket[]  // A user can have multiple tickets
  payments            Payment[] // A user can have multiple payments
  reports             Report[]  // An admin can generate multiple reports
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model Ticket {
  id          String    @id @default(uuid())
  type        String    // e.g., single, daily, weekly, monthly
  status      String    // e.g., valid, expired
  expiration  DateTime  // Expiration date of the ticket
  qrCode      String?   // QR code for the ticket
  nfcTag      String?   // NFC tag for the ticket
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  payment     Payment?  @relation("TicketPayment") // Name the relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Payment {
  id          String    @id @default(uuid())
  amount      Float
  method      String    // e.g., credit card, digital wallet
  status      String    // e.g., pending, completed
  userId      String
  user        User      @relation(fields: [userId], references: [id])
  ticketId    String?   @unique // Foreign key to Ticket
  ticket      Ticket?   @relation("TicketPayment", fields: [ticketId], references: [id]) // Define the relation
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Report {
  id              String    @id @default(uuid())
  date            DateTime
  totalRevenue    Float
  peakUsageTime   DateTime
  adminId         String
  admin           User      @relation(fields: [adminId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Event {
  id     String @id @default(uuid()) 
}